open Containers
module Graph = Day4.Graph
module Index = Graph.Index
module CharHashtbl = Hashtbl.Make' (Char)
module IndexSet = Set.Make (Index)

let antinodes map (antenna1, antenna2) =
  let open Index in
  let n1 = antenna2 - antenna1 + antenna2 in
  let n2 = antenna1 - antenna2 + antenna1 in
  [ n1; n2 ] |> List.filter (Graph.is_valid_index map)

let part1 lines =
  let map = Graph.of_strings lines in
  (* group antenas by frequency *)
  let frequency_locations = CharHashtbl.create 100 in
  Graph.iteri
    (fun location -> function
      | '.' -> ()
      | freq -> CharHashtbl.add_list frequency_locations freq location)
    map;
  let all_antinodes =
    CharHashtbl.to_iter frequency_locations
    |> Iter.fold
         (fun acc (_freq, locations) ->
           (* for each frequency, find all antinodes *)
           locations |> List.to_iter |> Iter.diagonal
           |> Iter.map (antinodes map)
           |> Iter.fold List.append [] |> IndexSet.add_list acc)
         IndexSet.empty
  in
  IndexSet.iter (fun idx -> Graph.set map idx '#') all_antinodes;
  Format.printf "%a@." (Graph.pp Char.pp) map;
  all_antinodes |> IndexSet.to_iter |> Iter.length

let test =
  {|............
........0...
.....0......
.......0....
....0.......
......A.....
............
............
........A...
.........A..
............
............|}

let%expect_test "part1" =
  String.lines test |> part1 |> string_of_int |> print_endline;
  [%expect
    {|
    . . . . . . # . . . . #
    . . . # . . . . 0 . . .
    . . . . # 0 . . . . # .
    . . # . . . . 0 . . . .
    . . . . 0 . . . . # . .
    . # . . . . # . . . . .
    . . . # . . . . . . . .
    # . . . . . . # . . . .
    . . . . . . . . A . . .
    . . . . . . . . . A . .
    . . . . . . . . . . # .
    . . . . . . . . . . # .
    14 |}];

  Util.with_data_file "day8.txt" (fun ic ->
      IO.read_lines_l ic |> part1 |> Util.print_int);
  [%expect
    {|
    . . . . . . . . # . . # . . . . . . . # # . . . . . . . . . b . # . . . . . . . . . . . . . . . . .
    . # . # . . . . . . . . . . . . . . . # . . . . . . # . . . . # # . g . . . . . # . . . . . . . . .
    # . . . . . . . . . . . # . . . . . . . . . . . . . . . . c # # . . . # # . . . . . . . . . . . . .
    . . . . . . . . . . . . T . . . . . . # . Z . . . . # . # P . . . . # . . . . # . . . . . . . . . .
    . x . . . . . . . . . . . # . # . . . . . . . . . . # P . . . . . . . . . # # . . . . . . . . . . .
    # . . . . # . . . . . . . . . . . . # . . . . . . # P # # . . . . . . . . . # . # . . . # # . . . .
    . . . . . . . . . . . . . . . . # H . . . # . Z . # . . . . . # . R # . . . . . . . . . . . . . . .
    . . . . . . f # . . # . . . . . . . # T . V . # . . b . . # . . . A . . . . . . . . . . . . . . . .
    . . . . . . . . . . . . # . . . . . . . . . P . # . . . . . . . . . # . . . . . . # . . . # . . . #
    . . . . . . . f # . . # . . . . . . . . . . # . . # A . . # . . . . . . . . . . R . . . . . . . . .
    . . . . . . . . x . . . . . . . # . . . . . . T # . . . # . . l . . H . . . . . A . c . . . . . . .
    . . k . . x . . # . . . . . . . . # # # # . . . . . # . # . . # # . # . . . . . . . . . . . . . . .
    . . # . . . # . # . . . . S . # . # # # . . # . . . # # . 0 # A . . # . . . . # . . . . . . # # . .
    . . . . . . . . . . . . . # . # . . L # . . . . . . # # . . . . . # . . . . # . . # . # . . # # . .
    . f . . # . . . . . . . # . . . . . . . . . # . . . . # . . T # . . . . . . . s . . . . . # # . . .
    . . . . # . . . # . . . . . . . . # l . . # . . . # . . . b H . . . . . # . t c . # . . N . # . . .
    . . . . . . Z . . # 6 # . . . # # # . . . . . . # . . . k . N . . # 0 . . . . . . . . # . . . . . .
    . . . # . . . . . . . g . . . . # . . . . . . # . r . . . # # . # . # . . . . . . . . t . . s . . .
    . . L . . . . . . # . . . . . # . . . b . . # . . . . K . . # . . . . . . # . . . . . . . # . . . .
    . # . . . . . # . . . . . . . # 5 # . # . n . . . . . . # . 0 . . . # . . . . . . . . . c . . # # .
    . . . # . # . . . . . . n . . . . . . . . . . . . # # . # . . . . . . . # . . # . E . . . . # . . .
    . k . # . . # . . # . . . . # . . . . . . . # . . . # # . . . . . . . . # . . . . # # . # . . . E s
    . . . . . . . . # . . . # # S t . # . # . 5 . . . # # m . . . . # . . . . . . . # . . . . . . . . .
    . . . . . . . . . . # . 6 . # 5 . . . . . . . . . . . . # . . . # . . # . . . 0 . . . . . . . . . #
    . . . . . . . # . # . k . . . # # . # . . . . . . . # . . W . # . . . . . . 3 . . . . # . . . . . #
    . # . . . . . . . . . . . . . . n . . . . # . K . . # E . . . . 2 # # . . . . . . # # . 3 . . . # .
    # . . . . . . . . . . . . . . . . . . . # . . . # . # . . . . # . . . . E . . . . Q . . # . . # . .
    . . . . . . # . . . M . # . # # # . . . . # . . . . . . . . . . # # . . . . . . . . . . . # . . # .
    . . h . . . . . . . . . . . # . . . . . . . . . # . . . . . . . 1 . . . . . . . . . . . . . # . . #
    # # . . . . # . . . . # # . z . . . . . . . . . # . . . . 4 . . . e # . # . . . . # . W Y . . . . y
    . # . . . . . . f . . . . # # . . . . . # a . . . # . # # Y # . y . . . s # . . . . # . # . . . . .
    # . . h . . . . # . . # . . # # r . . # . . . . # . . . . . v . . . . m . . . . . # . # . . . . . #
    . # . # . h . . . # . . . . . # . . # # . . # # . . . . m . . # . # # . Q . . . . # W 3 . . . . . .
    . . . . . . . # . . . . . . . . # . . . . # . . . Y q . . . . Q . . . # . . . . . . . . . . . . . 7
    . . . . # . . . . 6 . . . . . # # # # . . . # . 7 . # # . . . . . . . . . . . # . . 9 . . . . . . #
    . . . . . # . . . . . . # . . . . . . X . . # . # . . . . . y . . q . . . . . 2 . # . . . . . . . .
    . . . . . . # . # . . . r . # . . . . . . # # # . . . q . . . . . y . . . # # . . . . . . 7 . 8 . .
    . . B . . . # . . . . . . . . . . M . . # # 4 . . . . . . # . # . . . 9 # . . . # . . . # . . . . .
    . . . 1 . # . . . . . M # . . X . . . # . . . C G z p . . . # # # B . . . 2 . . K . . . . . . . # .
    . . . . . # # . . . . . . . . . . # . # . z . # . v . . # . Q # . . . . 8 . # # . # # # . . . . 9 .
    B . . . . . . . X # F . . . . r M # . . v # . . . . . . # . . . # . . . 2 . . . 8 . . # # . . . # .
    # 1 . . . . . . # . . # . . . # . . . . . . . . . . . . . . . . 7 . # # # . . . . 8 . . # . d # . .
    . # . . . . . . . . . . . . . F . . . . . # . . . # . # . # . . . . # # . 9 D . . . # 4 . . . . d .
    . . . . . . . . . . # . . . . # . # # . . . . . . . # # . . # . . . . . . . . . W # D . . . # . . d
    . . . . . . # . . . . . . . . . . . # . # . . . # G . . C . . . . # . . . . . . q . . . . # # . . .
    . . . B . . # # . . . . . . . # . . . . . . # . . . # . . # # . . # . . . . C . . . . . . . # . # #
    . . . . . . . . . w . . . . . # . . . # z . . . # p # # . . . . . # . # . . . . . # . . . . . e # .
    . a . . . . . . . . . . . . G . # . . w # . . . # . . . p . . # . . . . # F . # . . . . . . e . . .
    . . . . . . . . # . . . w . . . . # . . . . . . . . . . . # . # . . . . . . . . # . . . . # . . . .
    . . . . . # . . w . # . # . # # . . . . . . . . X C . . # . . . . # . . . . . . . . . . . . . . # .
    392 |}]

let resonant_antinodes map (antenna1, antenna2) =
  let open Index in
  let rec resonate acc last current =
    let antinode = current - last + current in
    if Graph.is_valid_index map antinode then
      resonate (antinode :: acc) current antinode
    else acc
  in
  resonate [] antenna1 antenna2 @ resonate [] antenna2 antenna1

let part2 lines =
  let map = Graph.of_strings lines in
  let frequency_locations = CharHashtbl.create 100 in
  let antennas =
    Graph.foldi
      (fun acc location -> function
        | '.' -> acc
        | freq ->
            CharHashtbl.add_list frequency_locations freq location;
            IndexSet.add location acc)
      IndexSet.empty map
  in
  let antinodes =
    CharHashtbl.to_iter frequency_locations
    |> Iter.fold
         (fun acc (_freq, locations) ->
           (* for each frequency, find all antinodes *)
           locations |> List.to_iter |> Iter.diagonal
           |> Iter.map (resonant_antinodes map)
           |> Iter.fold List.append [] |> IndexSet.add_list acc)
         IndexSet.empty
  in
  IndexSet.iter (fun idx -> Graph.set map idx '#') antinodes;
  let all_antinodes = IndexSet.union antennas antinodes in
  Format.printf "%a@." (Graph.pp Char.pp) map;
  all_antinodes |> IndexSet.to_iter |> Iter.length
(* let%expect_test "part2" = *)
(*   String.lines test |> part2 |> string_of_int |> print_endline; *)
(*   [%expect *)
(* {| *)
   (*   # # . . . . # . . . . # *)
   (*   . # . # . . . . 0 . . . *)
   (*   . . # . # 0 . . . . # . *)
   (*   . . # # . . . 0 . . . . *)
   (*   . . . . # . . . . # . . *)
   (*   . # . . . # # . . . . # *)
   (*   . . . # . . # . . . . . *)
   (*   # . . . . # . # . . . . *)
   (*   . . # . . . . . A . . . *)
   (*   . . . . # . . . . A . . *)
   (*   . # . . . . . . . . # . *)
   (*   . . . # . . . . . . # # *)
   (*   34 |}]; *)
(*   Util.with_data_file "day8.txt" (fun ic -> *)
(*       IO.read_lines_l ic |> part2 |> Util.print_int); *)
(*   [%expect *)
(* {| *)
   (*     # . . . . # # . # . . # . . # # . # . # # . . # . . . # . . b # # . . # . # # . # . # . # . . . # . *)
   (*     . # . # . . # # # . . # # . . . . . # # . . . . # . # . . # # # # # # # # . . # # . . . . . . . # # *)
   (*     # . # . . . # # # # . # # . . . . . # . . # # . # # # # . # # # # . . # # . # . . . . . . . . . . . *)
   (*     . # . # # . . . # # . . T . . . # . . # # Z . . # . # . # # . . . . # . # # # # . . . . . . . # . . *)
   (*     . # . . # . # . . # # # . # . # . . . # . . . # # . # P # . . . # . . # # # # . # . . # . . . # . . *)
   (*     # . . . . # . . # . # # . # . . # # # # # . . # . # P # # . . . . . . # . # # . # . # . # # . . . . *)
   (*     . . . . . . # . . . . # # . . . # # . . # # . # . # . . # . # # . R # . # . . . . . . . # # . . . . *)
   (*     . . . # . # f # . # # . # # . . . # # # # # # # # . b # . # . # . # . . . . . . . . . . . # # . . . *)
   (*     . . . # . . . . # . . . # # # . . . . # . . P # # # . # # . . . # . # . . . . . . # . . . # . . # # *)
   (*     # . . # . . . f # # . # # . # # . # # . # . # # . # A . . # . # . . . # . . . . # . . . . . . . . # *)
   (*     . # . . # . . . x # # . . . . # # . . . # # . T # . # . # . # l . . H . . . . . # . # . . . # . . # *)
   (*     . # k . . x . . # # . # # # . . # # # # # # . . . # # # # # . # # . # . . . . . . . . . . . # . # # *)
   (*     # . # . . . # . # . . # # S . # . # # # . . # . . # # # # # # A . . # . . . . # . . . . . . # # . . *)
   (*     # . . . # # # . . # . # # # # # . . # # # . # . . # # # . . . . . # . . . . # . . # . # . . # # . . *)
   (*     . # . # # . . # # . . . # . # # . # # # # . # . . . # # . # T # . . . . . . . s # . . . . # # # # # *)
   (*     . . . . # # # # # . # # . . . # # # l . # # . . . # . . . # H . . # # . # . # c # # . . N . # . . # *)
   (*     . . . # . . # . . # 6 # # # # # # # . # . # # . # # . . # # N # . # 0 . . . . . . . . # . . . . # . *)
   (*     . # . # . . . . # . # # . . # . # # . # # . # # . r . # . # # . # . # . . . . # . . # # . . s # . . *)
   (*     # . # . # . . . # # . . . # . # . . # # # # # # # . . # . # # # . . . . # # . . . # . . . # . # # . *)
   (*     . # # . . # . # # . . . # # # # 5 # # # . # . # # # . . # . 0 . . . # # . . . # # . # # c . . # # . *)
   (*     # # . # # # # # # . . # n . # # . . . . # # # . . # # . # . . . . # . . # . . # . E . . # . # . # # *)
   (*     # k # # . # # . . # # . . # # . # . # # # # # . # . # # . # . . . # . . # . # . . # # . # . # . E s *)
   (*     # . . . . . . . # # . . # # S t . # # # . 5 # . . # # # # # . . # . . # . # . # # . . . # # . . . # *)
   (*     . # # . . . . . # # # . 6 # # 5 . # # # . . . # . . . . # # . . # . . # # . # 0 . . . . . # . # . # *)
   (*     . . # # . . . # . # . # # . # # # . # . . # . # # . # . # # # # . . . # . # 3 . # . . # # # . . . # *)
   (*     # # . # . . # . . . # . . # # # # . . . . # # # . # # E . # # # 2 # # . . . . . . # # # 3 # . . # . *)
   (*     # . . # . # . . . . . # . # # . # . . # # . # . # . # . . # . # # # . . E . . . . Q . # # # . # . . *)
   (*     . . # . # # # . . . M . # # # # # . # . . # # # # # . # . . . # # # . . . # . . . . . # . # # # # . *)
   (*     . . # # . . # . # # # . # . # # # # # . # . . . # . . . # # . # 1 # # . . # . . . . # . # . # # . # *)
   (*     # # # . . . # . . # . # # . z . . # . . . . # . # . . # # # # . . e # # # # . . . # . # # . . . . # *)
   (*     # # # . # . . . f . # . . # # # . . # . # a . . # # . # # # # # y . . # # # . # . # # # # # # . . . *)
   (*     # . . h # # # # # # . # . # # # # . # # . . . . # . # . # . v # . . . # # # . . . # . # . . # . . # *)
   (*     . # . # . h . # # # # . . . . # . # # # . # # # . # . # # . . # # # # . # # # . # # W 3 . . . # . # *)
   (*     . . # . . . . # . # . # # . # . # . . # . # . . # Y # . . . # Q # # # # . # # # . # . . # # . . . 7 *)
   (*     . # . # # . # . . # # . . # # # # # # . . . # . 7 # # # . # . . # . # # # . . # # # 9 . . # . . . # *)
   (*     . . # . . # # # . . # # # . # . # # . X # # # . # . # # # # y . . q # # # # . 2 # # . . . # . . . . *)
   (*     # . . . # # # . # . . . # # # . # . . . # # # # # . # q . # . . . # . . # # # . # # # # # 7 . 8 . . *)
   (*     . # B # . # # . # . . # # . . # # M # . # # # # . . . . # # . # . . . # # # # . # . # # # # # . # # *)
   (*     . # # 1 . # # . . . . M # . # # . # . # . # # C G z # . . . # # # B . . . 2 # # # . . # # . . # # # *)
   (*     . # . . # # # . . # . # . . . # . # . # # # # # . v # . # # Q # . . . . 8 . # # . # # # # # . # # . *)
   (*     # . # # . # # # X # # # . . . r M # . # v # . . # . . . # . # . # # . # 2 . . . # . . # # # # . # # *)
   (*     # 1 # . # . . . # . # # . # . # . . # . . . . # . . . . . . . . 7 . # # # . . # # 8 . . # . # # # . *)
   (*     . # . # . . # . # # # . . # . F # # . # . # . . . # . # . # . # . . # # # # # . . . # 4 . . . # # . *)
   (*     . # . . . # . # . . # . . . # # # # # # . # . . # . # # . . # . # . . . . . . . W # D # . . # # # d *)
   (*     # # . . . . # # . . . # . . # # . . # # # # . . # # # . # # . . . # # . . . # . # # . . # # # . . # *)
   (*     . . . # . . # # . # . . . . # # . . . . . # # . # # # # . # # # # # . . . . C # . . # . . # # # # # *)
   (*     . . . . # . . # # w . # . # # # . . . # # . . . # # # # # . . # . # . # . . . . . # . . # . # e # . *)
   (*     . a . # # . . . . # . # # . G . # # . w # . . . # . # . p . . # . . # # # # . # . # . . . . e # # . *)
   (*     . . . # . # . . # . # # w . . # . # . . . # . # # . # . . # # # # . . # # # . . # . . . . # . # # . *)
   (*     . . # . . # . # w # # . # # # # . . . . . . . . X C . # # . . . . # # . . . . # # . . . # . . . # # *)
   (*     1235 |}] *)
